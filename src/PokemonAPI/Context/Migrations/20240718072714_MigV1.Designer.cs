// <auto-generated />
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(PokemonDBContext))]
    [Migration("20240718072714_MigV1")]
    partial class MigV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Entities.MoveEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Accuracy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("Entities.PokemonMoveEntity", b =>
                {
                    b.Property<int>("LearningId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearnedMoveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Generation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearningLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearningId", "LearnedMoveId", "Generation");

                    b.HasIndex("LearnedMoveId");

                    b.ToTable("MovePool");
                });

            modelBuilder.Entity("Entities.TypeEfficiencyEntity", b =>
                {
                    b.Property<string>("DamagingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Coefficient")
                        .HasColumnType("INTEGER");

                    b.HasKey("DamagingId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("TypeEfficiencies");
                });

            modelBuilder.Entity("Entities.TypeEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Typing")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("EntityExtensions.Pokemons.SimplePokemonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SimplePokemons");

                    b.HasDiscriminator().HasValue("SimplePokemonEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PokemonWithoutMovesEntityTypeEntity", b =>
                {
                    b.Property<int>("PokemonsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypesName")
                        .HasColumnType("TEXT");

                    b.HasKey("PokemonsId", "TypesName");

                    b.HasIndex("TypesName");

                    b.ToTable("PokemonWithoutMovesEntityTypeEntity");
                });

            modelBuilder.Entity("Entities.Pokemons.PokemonWithoutMovesEntity", b =>
                {
                    b.HasBaseType("EntityExtensions.Pokemons.SimplePokemonEntity");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SP_Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SP_Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Special")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("PokemonWithoutMovesEntity");
                });

            modelBuilder.Entity("Entities.Pokemons.PokemonEntity", b =>
                {
                    b.HasBaseType("Entities.Pokemons.PokemonWithoutMovesEntity");

                    b.HasDiscriminator().HasValue("PokemonEntity");
                });

            modelBuilder.Entity("Entities.MoveEntity", b =>
                {
                    b.HasOne("Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Entities.PokemonMoveEntity", b =>
                {
                    b.HasOne("Entities.MoveEntity", "LearnedMove")
                        .WithMany()
                        .HasForeignKey("LearnedMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Pokemons.PokemonEntity", "Learning")
                        .WithMany("MovePool")
                        .HasForeignKey("LearningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearnedMove");

                    b.Navigation("Learning");
                });

            modelBuilder.Entity("Entities.TypeEfficiencyEntity", b =>
                {
                    b.HasOne("Entities.TypeEntity", "Damaging")
                        .WithMany()
                        .HasForeignKey("DamagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TypeEntity", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Damaging");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("PokemonWithoutMovesEntityTypeEntity", b =>
                {
                    b.HasOne("Entities.Pokemons.PokemonWithoutMovesEntity", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TypeEntity", null)
                        .WithMany()
                        .HasForeignKey("TypesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Pokemons.PokemonEntity", b =>
                {
                    b.Navigation("MovePool");
                });
#pragma warning restore 612, 618
        }
    }
}
